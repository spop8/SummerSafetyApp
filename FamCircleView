//
//  ContentView.swift
//  copy of attempt 5.2
//
//  Created by DPI Student 051 on 7/22/24.
//
import SwiftUI
import MapKit

struct FamCircleView: View {
    @State private var members: [Member] = [
        Member(name: "Name 1", coordinate: CLLocationCoordinate2D(latitude: 41.87908567094122, longitude: -87.63729825360392)),
        Member(name: "Name 2", coordinate: CLLocationCoordinate2D(latitude: 41.810954922194504, longitude: -87.63098020297635)),
        Member(name: "Name 3", coordinate: CLLocationCoordinate2D(latitude: 41.8826083144210, longitude: -87.62257285767127)),
        Member(name: "Add User", coordinate: CLLocationCoordinate2D(latitude: 0, longitude: 0)),
    ]
    @State private var selectedMessageOption = 0
    @State private var selectedUpdateOption = 0
    @State private var newMemberName = ""
    @State private var newMemberLatitude = ""
    @State private var newMemberLongitude = ""
    
    let messageOptions = ["Share ETA", "New destination?", "Alert all"]
    let updateOptions = ["On track", "Off track", "Stopped for 30+ mins"]
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                HStack(spacing: 20) {
                    VStack {
                        Image(systemName: "paperplane.fill")
                            .font(.title3)
                            .fontWeight(.heavy)
                            .frame(width: 100, height: 100)
                            .border(Color.blue, width: 4)
                            .cornerRadius(10)
                            .foregroundColor(.red)
                            .imageScale(.large)
                        
                        // Dropdown list (Picker) for Send message
                        Picker(selection: $selectedMessageOption, label: Text("Send message")) {
                            ForEach(0..<messageOptions.count, id: \.self) { index in
                                Text(messageOptions[index])
                                    .tag(index)
                            }
                        }
                        .pickerStyle(MenuPickerStyle())
                        .frame(width: 150)
                        .padding(.top, 10)
                    }
                    
                    VStack {
                        Image(systemName: "bell.fill")
                            .fontWeight(.heavy)
                            .font(.title3)
                            .frame(width: 100, height: 100)
                            .border(Color.blue, width: 4)
                            .cornerRadius(10)
                            .foregroundColor(.red)
                            .imageScale(.large)
                        
                        // Dropdown list (Picker) for Updates
                        Picker(selection: $selectedUpdateOption, label: Text("Updates")) {
                            ForEach(0..<updateOptions.count, id: \.self) { index in
                                Text(updateOptions[index])
                                    .tag(index)
                            }
                        }
                        .pickerStyle(MenuPickerStyle())
                        .frame(width: 150)
                        .padding(.top, 10)
                    }
                }
                
                ZStack(alignment: .center) {
                    Map(coordinateRegion: .constant(
                        MKCoordinateRegion(
                            center: members.first!.coordinate,
                            span: MKCoordinateSpan(latitudeDelta: 0.1, longitudeDelta: 0.1)
                        )
                    ), annotationItems: members) { member in
                        MapPin(coordinate: member.coordinate, tint: .pink)
                    }
                    .frame(height: 300)
                    .cornerRadius(10)
                    .border(Color.blue, width: 4)
                    .padding(.horizontal)
                    
                    // Secondary Circle Overlay
                    Circle()
                        .stroke(Color.pink, lineWidth: 6)
                        .frame(width: 200, height: 200)
                        .opacity(0.5)
                }
                
                List {
                    ForEach(members.indices, id: \.self) { index in
                        if index == members.count - 1 { // Last item (Add User)
                            HStack {
                                TextField("Name", text: $newMemberName)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                
                                TextField("Latitude", text: $newMemberLatitude)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                
                                TextField("Longitude", text: $newMemberLongitude)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                
                                Button(action: {
                                    if let latitude = Double(self.newMemberLatitude),
                                       let longitude = Double(self.newMemberLongitude) {
                                        let newMember = Member(name: self.newMemberName, coordinate: CLLocationCoordinate2D(latitude: latitude, longitude: longitude))
                                        self.members.insert(newMember, at: self.members.count - 1)
                                        self.newMemberName = ""
                                        self.newMemberLatitude = ""
                                        self.newMemberLongitude = ""
                                    }
                                }) {
                                    Image(systemName: "plus.circle.fill")
                                        .font(.title3)
                                        .foregroundColor(.blue)
                                }
                                .buttonStyle(BorderlessButtonStyle())
                            }
                        } else {
                            NavigationLink(destination: MapView(member: members[index], members: members)) {
                                Text(members[index].name)
                            }
                        }
                    }
                }
                .navigationBarTitle("Family Circle:")
                .padding(.horizontal)
                .listStyle(InsetGroupedListStyle())
            }
        }
    }
}

struct MapView: View {
    let member: Member
    let members: [Member]
    
    var body: some View {
        Map(coordinateRegion: .constant(
            MKCoordinateRegion(
                center: member.coordinate,
                span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
            )
        ), annotationItems: members) { member in
            MapPin(coordinate: member.coordinate, tint: .pink)
        }
        .navigationBarTitle(member.name)
    }
}

struct Member: Identifiable {
    let id = UUID()
    let name: String
    let coordinate: CLLocationCoordinate2D
}

struct FamCircleView_Previews: PreviewProvider {
    static var previews: some View {
        FamCircleView()
    }
}

